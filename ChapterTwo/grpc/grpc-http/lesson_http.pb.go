// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.32.0
// source: lesson.proto

package main

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLessonServiceGetLesson = "/main.LessonService/GetLesson"

type LessonServiceHTTPServer interface {
	GetLesson(context.Context, *LessonId) (*Lesson, error)
}

func RegisterLessonServiceHTTPServer(s *http.Server, srv LessonServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/getLesson/{id}", _LessonService_GetLesson0_HTTP_Handler(srv))
}

func _LessonService_GetLesson0_HTTP_Handler(srv LessonServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LessonId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLessonServiceGetLesson)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLesson(ctx, req.(*LessonId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Lesson)
		return ctx.Result(200, reply)
	}
}

type LessonServiceHTTPClient interface {
	GetLesson(ctx context.Context, req *LessonId, opts ...http.CallOption) (rsp *Lesson, err error)
}

type LessonServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewLessonServiceHTTPClient(client *http.Client) LessonServiceHTTPClient {
	return &LessonServiceHTTPClientImpl{client}
}

func (c *LessonServiceHTTPClientImpl) GetLesson(ctx context.Context, in *LessonId, opts ...http.CallOption) (*Lesson, error) {
	var out Lesson
	pattern := "/getLesson/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLessonServiceGetLesson))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
